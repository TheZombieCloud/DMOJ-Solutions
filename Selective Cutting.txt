import java.util.*;
import java.io.*;
/**
 *
 * @author Alexander Ma
 */
public class SelectiveCutting2 {

    /**
     * @param args the command line arguments
     */
    static long [] BIT;
    
    public static void update (int value, int idx){
        while (idx<BIT.length){
            BIT[idx] += value;
            idx += idx & (-idx);
        }
    }
    
    public static long sum (int idx){
        long sum2 = 0;
        while (idx>0){
            sum2 += BIT[idx];
            idx -= idx & (-idx);
        }
        return sum2;
    }
    
    public static void main(String[] args) throws IOException{
        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        int size = Integer.parseInt(input.readLine());
        String [] tokens = input.readLine().split(" ");
        BIT = new long[size+1];
        PriorityQueue <Pair> q = new PriorityQueue();
        for (int i = 0;i<size;i++){
            int val = Integer.parseInt(tokens[i]);
            int index = i+1;
            q.add(new Pair(val, index));
        }
        int queries = Integer.parseInt(input.readLine());
        long [] ans = new long[queries];
        PriorityQueue <Node> q2 = new PriorityQueue();
        for (int i = 0;i<queries;i++){
            tokens = input.readLine().split(" ");
            int l = Integer.parseInt(tokens[0]);
            int r = Integer.parseInt(tokens[1]);
            int val = Integer.parseInt(tokens[2]);
            int idx = i;
            q2.add(new Node(l,r,val,idx));
        }
        for (int i = 0;i<queries;i++){
            Node cur = q2.poll();
            int l = cur.l;
            int r = cur.r+1;
            int val = cur.val;
            int idx = cur.idx;
            while (!q.isEmpty()&&val<=q.peek().value){
                Pair n = q.poll();
                int value = n.value;
                int idx2 = n.index;
                update(value, idx2);
            }
            long sum3 = sum(r)-sum(l);
            ans[idx] = sum3;
        }
        for (int i = 0;i<ans.length;i++){
            System.out.println(ans[i]);
        }
    }
    static class Node implements Comparable<Node> {
        int l;
        int r;
        int val;
        int idx;
        Node (int l, int r, int val, int idx){
            this.l = l;
            this.r = r;
            this.val = val;
            this.idx = idx;
        }
        @Override
        public int compareTo(Node n){
            if (n.val>val){
                return 1;
            }
            return -1;
        }
    }
    static class Pair implements Comparable<Pair> {
        int value;
        int index;
        Pair (int value,int index){
            this.value = value;
            this.index = index;
        }
        @Override
        public int compareTo(Pair n){
            if (n.value>value){
                return 1;
            }
            return -1;
        }
    }
}
