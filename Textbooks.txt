import java.util.*;
import java.io.*;
/**
 *
 * @author Alexander Ma
 */
public class Textbooks {

    /**
     * @param args the command line arguments
     */
    public static Node [] seg;
    
    public static void build (long l, long r, int idx){
        seg[idx].l = l;
        seg[idx].r = r;
        if (l==r){
            return;
        }
        long mid = (l+r)/2;
        build(l,mid,2*idx);
        build(mid+1,r,2*idx+1);
    }
    
    public static void rupdate (long start, long end, long value, int idx){
        push_down(idx);
        if (seg[idx].l>=start&&seg[idx].r<=end){
            seg[idx].lazy = value;
            push_down(idx);
            return;
        }
        else if (seg[idx].l>end||seg[idx].r<start){
            return;
        }
        rupdate(start, end, value, idx*2);
        rupdate(start, end, value, idx*2+1);
        max(idx);
    }
    
    public static long query2 (long start, long end, int idx){
        push_down(idx);
        if (seg[idx].l>=start&&seg[idx].r<=end){
            return seg[idx].max;
        }
        else if (seg[idx].l>end||seg[idx].r<start){
            return 0;
        }
        long ansL = query2 (start, end, idx*2);
        long ansR = query2 (start, end, idx*2+1);
        return Math.max (ansL, ansR);
    }
    
    public static long query3 (long index, int idx){
        push_down(idx);
        if (seg[idx].l==seg[idx].r){
            return seg[idx].max;
        }
        long mid = (seg[idx].l+seg[idx].r)/2;
        if (index<=mid){
            return query3 (index, idx*2);
        }
        else {
            return query3 (index, idx*2+1);
        }
    }
    
    public static void push_down (int idx){
        if (seg[idx].lazy!=-1){
            seg[idx].max = seg[idx].lazy;
            if (seg[idx].l!=seg[idx].r){
                seg[idx*2].lazy = seg[idx].lazy;
                seg[idx*2+1].lazy = seg[idx].lazy;
            }
            seg[idx].lazy = -1;
        }
    }
    
    public static void max (int idx){
        seg[idx].max = Math.max(seg[idx*2].max, seg[idx*2+1].max);
    }
    
    public static void main(String[] args) throws IOException{
        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        int books = Integer.parseInt(input.readLine());
        long sum = 0;
        long [] start = new long[books];
        long [] length = new long[books];
        long [] width = new long [books];
        HashSet <Long> s = new HashSet();
        for (int i = 0;i<books;i++){
            String [] tokens = input.readLine().split(" ");
            start[i] = Long.parseLong(tokens[0]);
            length[i] = Long.parseLong(tokens[1]);
            width[i] = Long.parseLong(tokens[2]);
            s.add(start[i]);
            s.add(start[i]+length[i]-1);
            s.add(start[i]+length[i]);
            s.add(Math.max(0, start[i]-1));
            sum += length[i]%1000000007*width[i]%1000000007;
            sum %= 1000000007;
        }
        long [] ranks = new long[s.size()];
        int count = 0;
        Iterator <Long> itr = s.iterator();
        while (itr.hasNext()){
            ranks[count] = itr.next();
            count++;
        }
        Arrays.sort(ranks);
        seg = new Node [2*(int)Math.pow(2, Math.ceil(Math.log(ranks.length)/Math.log(2)))];
        for (int i = 0;i<seg.length;i++){
            seg[i] = new Node (0,0,0,-1);
        }
        build (0, ranks.length-1, 1);
        for (int i = 0;i<books;i++){
            long start2 = start[i];
            long length2 = length[i];
            long end2 = start2+length2-1;
            long width2 = width[i];
            long index1 = Arrays.binarySearch(ranks,start2);
            long index2 = Arrays.binarySearch(ranks,end2);
            long max = query2(index1,index2,1);
            rupdate (index1, index2, max+width2, 1);
        }
        long sum2 = 0;
        long before = -1;
        long bef = 0;
        long cur = 0;
        for (int i = 0;i<ranks.length;i++){
            long now = query3(i, 1);
            if (before!=now){
                sum2 += (cur-bef)*before;
                bef = ranks[i];
                cur = ranks[i]+1;
            }
            else {
                cur = ranks[i]+1;
            }
            before = now;
        }
        System.out.println((sum2-sum)%1000000007);
    }
    static class Node {
        long l;
        long r;
        long max;
        long lazy;
        Node (long l, long r, long max, long lazy){
            this.l = l;
            this.r = r;
            this.max = max;
            this.lazy = lazy;
        }
    }
}