import java.util.*;
import java.io.*;
/**
 *
 * @author Alexander Ma
 */
public class RoadConstruction {
    static ArrayList <Integer> [] adj;
    static ArrayList <Integer> [] adj2;
    static int [] DFN;
    static int [] low;
    static boolean [] vis;
    static boolean [][] bri;
    static int time = 0;
    static int ans = 0;
    /**
     * @param args the command line arguments
     */
    static void Bridge (int cur, int pre){
        vis[cur] = true;
        DFN[cur] = time++;
        low[cur] = DFN[cur];
        for (int i = 0;i<adj[cur].size();i++){
            int rn = adj[cur].get(i);
            if (!vis[rn]){
                Bridge(rn, cur);
            }
            if (rn!=pre){
                low[cur] = Math.min(low[cur], low[rn]);
            }
        }
    }
    
    static void DFS (int cur, int time2){
        vis[cur] = true;
        for (int i = 0;i<adj[cur].size();i++){
            int rn = adj[cur].get(i);
            if (!vis[rn]){
                if (bri[cur][rn]){
                    adj2[time2].add(time+1);
                    adj2[time+1].add(time2);
                    DFS(rn, ++time);
                }
                else {
                    DFS(rn, time2);
                }
            }
        }
    }
    
    static void DFS2 (int cur, int pre){
        for (int i = 0;i<adj2[cur].size();i++){
            int rn = adj2[cur].get(i);
            if (rn==pre)continue;
            DFS2(rn, cur);
        }
        if (adj2[cur].size()==1){
            ans++;
        }
    }
    
    public static void main(String[] args) throws IOException{
        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        String [] tokens = input.readLine().split(" ");
        int n = Integer.parseInt(tokens[0]);
        int m = Integer.parseInt(tokens[1]);
        adj = new ArrayList [n+1];
        adj2 = new ArrayList [n+1];
        for (int i = 1;i<=n;i++){
            adj[i] = new ArrayList();
            adj2[i] = new ArrayList();
        }
        ArrayList <Integer> temp1 = new ArrayList();
        ArrayList <Integer> temp2 = new ArrayList();
        for (int i = 0;i<m;i++){
            tokens = input.readLine().split(" ");
            int first = Integer.parseInt(tokens[0]);
            int sec = Integer.parseInt(tokens[1]);
            adj[first].add(sec);
            adj[sec].add(first);
            temp1.add(first);
            temp2.add(sec);
        }
        DFN = new int [n+1];
        low = new int [n+1];
        vis = new boolean [n+1];
        bri = new boolean [n+1][n+1];
        Bridge(1, -1);
        for (int i = 0;i<temp1.size();i++){
            int first = temp1.get(i);
            int sec = temp2.get(i);
            if (DFN[first]>DFN[sec]){
                if (!(low[first]<=DFN[sec])){
                    bri[first][sec] = true;
                    bri[sec][first] = true;
                }
            }
            else {
                if (!(low[sec]<=DFN[first])){
                    bri[first][sec] = true;
                    bri[sec][first] = true;
                }
            }
        }
        time = 1;
        vis = new boolean [n+1];
        DFS(1, 1);
        DFS2(1,-1);
        if (ans%2==0){
            System.out.println(ans/2);
        }
        else {
            System.out.println((ans/2)+1);
        }
    }
    
}