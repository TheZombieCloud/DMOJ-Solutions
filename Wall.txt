#include <iostream>
#include <bits/stdc++.h>

using namespace std;

struct Node {
    int l;
    int r;
    int max2;
    int min2;
    int lazy;
    int lazy2;
};

Node seg[4500000] = {};

void min3 (int idx){
    seg[idx].min2 = min(seg[idx*2].min2, seg[idx*2+1].min2);
}

void max3 (int idx){
    seg[idx].max2 = max(seg[idx*2].max2, seg[idx*2+1].max2);
}

void pushdown (int idx){
    if (seg[idx].lazy!=-1){
        seg[idx].min2 = max(seg[idx].min2, seg[idx].lazy);
        seg[idx].max2 = max(seg[idx].max2, seg[idx].min2);
        if (seg[idx].l!=seg[idx].r){
            if (seg[idx].lazy>seg[idx*2].lazy2){
                seg[idx*2].lazy2 = seg[idx].lazy;
                seg[idx*2].lazy = seg[idx].lazy;
            }
            if (seg[idx].lazy>seg[idx*2+1].lazy2){
                seg[idx*2+1].lazy2 = seg[idx].lazy;
                seg[idx*2+1].lazy = seg[idx].lazy;
            }
            seg[idx*2].lazy = max(seg[idx].lazy, seg[idx*2].lazy);
            seg[idx*2+1].lazy = max(seg[idx].lazy, seg[idx*2+1].lazy);
        }
        seg[idx].lazy = -1;
    }
    if (seg[idx].lazy2!=INT_MAX){
        seg[idx].max2 = min (seg[idx].max2, seg[idx].lazy2);
        seg[idx].min2 = min(seg[idx].min2, seg[idx].max2);
        if (seg[idx].l!=seg[idx].r){
            if (seg[idx].lazy2<seg[idx*2].lazy){
                seg[idx*2].lazy2 = seg[idx].lazy2;
                seg[idx*2].lazy = seg[idx].lazy2;
            }
            if (seg[idx].lazy2<seg[idx*2+1].lazy){
                seg[idx*2+1].lazy2 = seg[idx].lazy2;
                seg[idx*2+1].lazy = seg[idx].lazy2;
            }
            seg[idx*2].lazy2 = min(seg[idx].lazy2, seg[idx*2].lazy2);
            seg[idx*2+1].lazy2 = min(seg[idx].lazy2, seg[idx*2+1].lazy2);
        }
        seg[idx].lazy2 = INT_MAX;
    }
}

int query (int index, int idx){
    pushdown(idx);
    if (seg[idx].l==seg[idx].r){
        return seg[idx].min2;
    }
    int mid = (seg[idx].l+seg[idx].r)/2;
    if (index<=mid){
        query(index, idx*2);
    }
    else {
        query(index, idx*2+1);
    }
}

void build (int l, int r, int idx){
    seg[idx].l = l;
    seg[idx].r = r;
    seg[idx].max2 = 0;
    seg[idx].min2 = 0;
    seg[idx].lazy = -1;
    seg[idx].lazy2 = INT_MAX;
    if (l==r){
        return;
    }
    int mid = (l+r)/2;
    build (l, mid, idx*2);
    build (mid+1, r, idx*2+1);
}

void minupdate (int l, int r, int value, int idx){
    pushdown(idx);
    if (seg[idx].l>=l&&seg[idx].r<=r){
        if (value>seg[idx].min2){
            seg[idx].lazy = value;
            pushdown(idx);
        }
        return;
    }
    else if (seg[idx].l>r||seg[idx].r<l){
        return;
    }
    minupdate(l, r, value, idx*2);
    minupdate(l, r, value, idx*2+1);
    min3(idx);
    max3(idx);
}

void maxupdate (int l, int r, int value, int idx){
    pushdown(idx);
    if (seg[idx].l>=l&&seg[idx].r<=r){
        if (seg[idx].max2>value){
            seg[idx].lazy2 = value;
            pushdown(idx);
        }
        return;
    }
    else if (seg[idx].l>r||seg[idx].r<l){
        return;
    }
    maxupdate(l, r, value, idx*2);
    maxupdate(l, r, value, idx*2+1);
    min3(idx);
    max3(idx);
}

void buildWall(int n, int k, int op[], int left[], int right[], int height[], int finalHeight[]){
    build(0, n-1, 1);
    for (int i = 0;i<k;i++){
        if (op[i]==1){
            minupdate(left[i], right[i], height[i], 1);
        }
        else {
            maxupdate(left[i], right[i], height[i], 1);
        }
    }
    for (int i = 0;i<n;i++){
        finalHeight[i] = query(i, 1);
    }
}

int main()
{
    return 0;
}